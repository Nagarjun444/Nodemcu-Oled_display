#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <ArduinoJson.h>
#include <Hash.h>
#include <LittleFS.h>
#include <ESPAsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>



#define SCREEN_WIDTH 128  // OLED display width, in pixels
#define SCREEN_HEIGHT 64  // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);


const char* ssid = "Nagarjuna";
const char* password = "123456789";

// Parameter to save the input string
const char* PARAM_INPUT = "inputString";

String data; //data------------------------------------>



///------------------------------
const char* file_data;
// GPIO for LED
int LED = 2; // LED connected to D4 (GPIO2)

// Create an instance of the server
AsyncWebServer server(80);

// Variable to store the input data
String inputData;

int weather_on_off,time_on_off,quote_on_off,led_contorl;
int ip_controller=1;

String localIp;

//-----------------------------------------WEB PAGE CODE START FROM HERE------------------------
char webpage[] PROGMEM = R"=====(
<!DOCTYPE HTML>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>NodeMCU Project</title>
  <style>
    body {
      width: 100%;
      height: 100vh;
      margin: 0;
      background: linear-gradient(to right, #ff7e5f, #feb47b);
      color: #333333;
      font-family: 'Cursive', sans-serif;
      font-size: 16px;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      text-align: center;
    }
    h1 {
      margin: 20px 0;
      font-size: 36px;
    }
    .input-container, .button-container {
      margin: 10px 0;
    }
    .input-container input {
      padding: 10px;
      font-size: 18px;
      border-radius: 20px;
      border: 2px solid #333333;
      margin-right: 10px;
    }
    .submit_button, .button, .emoji {
      padding: 10px 20px;
      border-radius: 20px;
      font-size: 24px;
      margin: 5px;
      cursor: pointer;
      border: none;
      transition: transform 0.2s;
    }
    .submit_button {
      background-color: #ffffff;
      color: #333333;
      border: 2px solid #333333;
    }
    .button {
      color: white;
    }
    .on-button {
      background-color: green;
    }
    .off-button {
      background-color: red;
    }
    .emoji {
      font-size: 50px;
      border-radius: 50px;
    }
    .button:hover, .submit_button:hover, .emoji:hover {
      transform: scale(1.1);
    }
  </style>
</head>
<body>
  <h1>NodeMCU Project</h1>
  <div class="input-container">
    <input id="userInput" placeholder="Enter your Quote">
    <button class="submit_button" onclick="sendData()">Submit</button>
  </div>
  <h1 id="message"></h1>
  <div class="button-container">
    <button class="button on-button" onclick="location.href='/LED=OFF'">             LED ON      </button>
    <button class="button off-button" onclick="location.href='/LED=ON'">           LED OFF       </button><br>
    <button class="button on-button" onclick="location.href='/Display_vibe_on'">    Note ON     </button>
    <button class="button off-button" onclick="location.href='/Display_vibe_off'">  Note OFF    </button><br>
  </div> 
  <script>
    function sendData() {
      const userInput = document.getElementById('userInput').value;
      const xhr = new XMLHttpRequest();
      xhr.open('GET', '/get?inputString=' + encodeURIComponent(userInput), true);
      xhr.send();
      document.getElementById('message').innerText = 'Your Quote is: ' + userInput;
    }
  </script>

  
</body>
</html>

)=====";
 
//-----------------------------------------------------ENDED------------------------------------------------------------


//---------------------------setup---------------------------------------
void setup() 
{
  Serial.begin(115200);

 // Initialize the display
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;); // Loop forever if the display fails to initialize
  }

  // Clear the display once during setup
  display.clearDisplay();
  pinMode(LED, OUTPUT);
  digitalWrite(LED, HIGH);

  // Initialize LittleFS
  if (!LittleFS.begin()) 
  {
    Serial.println("An error has occurred while mounting LittleFS");
    return;
  }
  Serial.println("LittleFS mounted successfully");
  // Connect to WiFi
  Serial.print("Connecting to the Network");
  
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) 
  {
    delay(500);
    Serial.print(".");
    ip_controller=1;
  }
  Serial.println("WiFi connected");
  Serial.print("IP Address: ");
 // IP_address=WiFi.localIP();
  Serial.println(WiFi.localIP());
   localIp = WiFi.localIP().toString(); ///---passing data to display string
//  Serial.println(WiFi.localIP());
  Serial.println(localIp);  ////----->to print IP address
  
   // Route to serve the HTML page
  server.on("/", [](AsyncWebServerRequest *request)
  {
    request->send_P(200, "text/html", webpage);
  });

  // Handle the data received from the HTML input
  server.on("/get", HTTP_GET, [](AsyncWebServerRequest *request) 
  {
    if (request->hasParam(PARAM_INPUT))
    {
      inputData = request->getParam(PARAM_INPUT)->value();
      writeFile(LittleFS, "/inputString.txt", inputData.c_str());
      request->send_P(200, "text/html", webpage);
    } 
    else 
    {
      request->send(400, "text/plain", "No data received");
    }
  });




   // Handle LED ON
  server.on("/LED=ON", HTTP_GET, [](AsyncWebServerRequest *request) 
  {
     digitalWrite(LED, HIGH);
     led_contorl=1;
    //   delay(8000); // Print every 5 seconds
     request->send_P(200, "text/html", webpage);
     Serial.println("LED ON-----------------");
  });

  // Handle LED OFF
  server.on("/LED=OFF", HTTP_GET, [](AsyncWebServerRequest *request) 
  {
    digitalWrite(LED, LOW);
    led_contorl=0;
    // Weather_calling(); 
    request->send_P(200, "text/html", webpage);
    Serial.println("LED OFF-----------------");
  });



  

//------------------------------Quote_print_ON------------------------------------------
 server.on("/Display_vibe_on", HTTP_GET, [](AsyncWebServerRequest *request) 
  {
    Serial.println("------------------------------QUOTE---ON------------------------------------------");
    quote_on_off=1;   
    request->send_P(200, "text/html", webpage);
  });



  
//------------------------------Quote_print_OFF------------------------------------------
   server.on("/Display_vibe_off", HTTP_GET, [](AsyncWebServerRequest *request) 
  {
    Serial.println("------------------------------QUOTE--OFF------------------------------------------");
     quote_on_off=0;   
    request->send_P(200, "text/html", webpage);
  });
//----------------------------------------------------------------------------------
  
  // Start server
  server.begin();
  Serial.println("HTTP server started");
}










///-------------------LOOP----------------------------------------------------------------
void loop() 
{

  //-------------------------------------DISPLAY CONTENT---------------------------------------------
  // Clear the display before drawing new content
  display.clearDisplay();
  // Set the text size, color, and position
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 10);
 // display.print("");
  //display.println(data); //----data is the string to display the content
  // Display the buffer on the screen
 // display.display();
  // Delay for 1 second before updating again
//  delay(1000);
  //-----------------------------------------------------------------------------------------------------------
   
  if(quote_on_off == 1)
  {
    // Read the file and print its contents to the Serial Monitor
     String fileContent = readFile(LittleFS, "/inputString.txt");
     if (fileContent.length() > 0)
      {
        //Serial.println("Content of /inputString.txt:");
        Serial.println(fileContent);
      //   display.print("VIBE:");
      //  data=fileContent;

         //-------------------------------------DISPLAY CONTENT---------------------------------------------
          // Clear the display before drawing new content
          //display.clearDisplay();
          // Set the text size, color, and position
          display.setTextSize(1);
          display.setTextColor(WHITE);
          display.setCursor(0, 10);
          // Display dynamic data (e.g., counter)
          display.print("VIBE:");
          display.println(fileContent); //----data is the string to display the content
          // Display the buffer on the screen
          display.display();
          // Delay for 1 second before updating again
        //  delay(1000);     
      }
  }
  else if(led_contorl == 1)
  {
    

          display.print("IP:");
          display.println(localIp); //----data is the string to display the content
          // Display the buffer on the screen
          display.display();
  }

}




////---------------------------FILLE WRITE FUNCTION-----------------------------------------------------
void writeFile(fs::FS &fs, const char * path, const char * message) 
{
  File file = fs.open(path, "w");
  if (!file) 
  {
    Serial.println("Failed to open file for writing");
    return;
  }
  if (file.print(message)) 
  {
    Serial.println("File written");
  } 
  else 
  {
    Serial.println("Write failed");
  }
  file.close();
}

String readFile(fs::FS &fs, const char * path) 
{
  File file = fs.open(path, "r");
  if (!file) 
  {
    Serial.println("Failed to open file for reading");
    return String();
  }
  String fileContent;
  while (file.available()) 
  {
    fileContent += file.readStringUntil('\n');
  }
  file.close();
  return fileContent;
}
